"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJson = exports.getPackageRoot = void 0;
const findup = __importStar(require("find-up"));
const fs_extra_1 = require("fs-extra");
const path = __importStar(require("path"));
function getPackageJsonPath() {
    return findClosestPackageJson(__filename);
}
function getPackageRoot() {
    const packageJsonPath = getPackageJsonPath();
    if (packageJsonPath === null) {
        throw Error("Can't find package root. File `package.json` doesn't exist in the project.");
    }
    return path.dirname(packageJsonPath);
}
exports.getPackageRoot = getPackageRoot;
function findClosestPackageJson(file) {
    var _a;
    return (_a = findup.sync("package.json", { cwd: path.dirname(file) })) !== null && _a !== void 0 ? _a : null;
}
async function getPackageJson() {
    const root = getPackageRoot();
    return await fs_extra_1.readJSON(path.join(root, "package.json"));
}
exports.getPackageJson = getPackageJson;
//# sourceMappingURL=package-info.js.map