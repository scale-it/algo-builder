"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveBuilderRegisterPath = exports.runScript = void 0;
const debug_1 = __importDefault(require("debug"));
const path = __importStar(require("path"));
const errors_1 = require("../../internal/core/errors");
const log = debug_1.default("algob:core:scripts-runner");
async function loadScript(relativeScriptPath) {
    const absoluteScriptPath = path.join(process.cwd(), relativeScriptPath);
    try {
        return require(absoluteScriptPath);
    }
    catch (err) {
        throw new errors_1.BuilderError(errors_1.ERRORS.GENERAL.SCRIPT_LOAD_ERROR, {
            script: absoluteScriptPath,
            error: err.message
        });
    }
}
function displayErr(error, relativeScriptPath) {
    if (error instanceof errors_1.BuilderError) {
        throw error;
    }
    const maybeWrappedError = errors_1.parseAlgorandError(error, { scriptPath: relativeScriptPath });
    if (maybeWrappedError instanceof errors_1.BuilderError) {
        throw maybeWrappedError;
    }
    throw new errors_1.BuilderError(errors_1.ERRORS.BUILTIN_TASKS.SCRIPT_EXECUTION_ERROR, {
        script: relativeScriptPath,
        message: error.message
    }, error);
}
async function runScript(relativeScriptPath, runtimeEnv, deployer) {
    log(`Running ${relativeScriptPath}.default()`);
    const requiredScript = await loadScript(relativeScriptPath);
    if (!requiredScript.default) {
        throw new errors_1.BuilderError(errors_1.ERRORS.GENERAL.NO_DEFAULT_EXPORT_IN_SCRIPT, {
            script: relativeScriptPath
        });
    }
    try {
        await requiredScript.default(runtimeEnv, deployer);
    }
    catch (error) {
        displayErr(error, relativeScriptPath);
    }
}
exports.runScript = runScript;
/**
 * Ensure algob/register source file path is resolved to compiled JS file
 * instead of TS source file, so we don't need to run ts-node unnecessarily.
 */
function resolveBuilderRegisterPath() {
    const algobCoreBaseDir = path.join(__dirname, "..", "..", "..");
    return path.join(algobCoreBaseDir, "build/register.js");
}
exports.resolveBuilderRegisterPath = resolveBuilderRegisterPath;
//# sourceMappingURL=scripts-runner.js.map