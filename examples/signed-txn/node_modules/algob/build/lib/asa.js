"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadASAFile = exports.validateASADefs = void 0;
const path_1 = __importDefault(require("path"));
const z = __importStar(require("zod"));
const errors_1 = require("../internal/core/errors");
const errors_list_1 = require("../internal/core/errors-list");
const project_structure_1 = require("../internal/core/project-structure");
const validation_errors_1 = require("../internal/core/validation-errors");
const types_input_1 = require("../types-input");
const files_1 = require("./files");
function validateSingle(accounts, filename, asaDef) {
    if (!asaDef.optInAccNames || asaDef.optInAccNames.length === 0) {
        return;
    }
    for (const accName of asaDef.optInAccNames) {
        if (!accounts.get(accName)) {
            throw new errors_1.BuilderError(errors_list_1.ERRORS.SCRIPT.ASA_PARAM_ERROR_NO_NAMED_OPT_IN_ACCOUNT, {
                filename: filename,
                optInAccName: accName
            });
        }
    }
}
function validateParsedASADefs(accounts, asaDefs, filename) {
    for (const def of Object.values(asaDefs)) {
        validateSingle(accounts, filename, def);
    }
}
function validateASADefs(obj, accounts, filename) {
    try {
        const parsed = types_input_1.ASADefsSchema.parse(obj);
        Object.keys(parsed).forEach(k => {
            if (parsed[k].defaultFrozen === undefined) {
                parsed[k].defaultFrozen = false;
            }
        });
        validateParsedASADefs(accounts, parsed, filename);
        return parsed;
    }
    catch (e) {
        if (e instanceof z.ZodError) {
            throw new errors_1.BuilderError(errors_list_1.ERRORS.SCRIPT.ASA_PARAM_PARSE_ERROR, {
                reason: validation_errors_1.parseZodError(e),
                filename: filename
            }, e);
        }
        throw e;
    }
}
exports.validateASADefs = validateASADefs;
function loadASAFile(accounts) {
    const filename = path_1.default.join(project_structure_1.ASSETS_DIR, "asa.yaml");
    return validateASADefs(files_1.loadFromYamlFileSilentWithMessage(filename, path_1.default.join(project_structure_1.ASSETS_DIR, "asa.yaml") + " doesn't exist."), accounts, filename);
}
exports.loadASAFile = loadASAFile;
//# sourceMappingURL=asa.js.map