import algosdk from "algosdk";
import { txWriter } from "../internal/tx-log-writer";
import { Account, Accounts, ASADef, ASADeploymentFlags, ASAInfo, ASCDeploymentFlags, ASCInfo, Network, TxParams } from "../types";
import { CompileOp } from "./compile";
export declare const ALGORAND_MIN_TX_FEE = 1000;
export declare function createAlgoOperator(network: Network): AlgoOperator;
export interface AlgoOperator {
    algodClient: algosdk.Algodv2;
    deployASA: (name: string, asaDef: ASADef, flags: ASADeploymentFlags, accounts: Accounts, txWriter: txWriter) => Promise<ASAInfo>;
    deployASC: (programb64: string, scParams: object, flags: ASCDeploymentFlags, payFlags: TxParams, txWriter: txWriter) => Promise<ASCInfo>;
    waitForConfirmation: (txId: string) => Promise<algosdk.ConfirmedTxInfo>;
    optInToASA: (asaName: string, assetIndex: number, account: Account, params: TxParams) => Promise<void>;
}
export declare class AlgoOperatorImpl implements AlgoOperator {
    algodClient: algosdk.Algodv2;
    compileOp: CompileOp;
    constructor(algocl: algosdk.Algodv2);
    waitForConfirmation(txId: string): Promise<algosdk.ConfirmedTxInfo>;
    getTxFee(params: algosdk.SuggestedParams, txSize: number): number;
    getUsableAccBalance(accoutInfo: algosdk.AccountInfo): number;
    getOptInTxSize(params: algosdk.SuggestedParams, accounts: Accounts): number;
    _optInToASA(asaName: string, assetIndex: number, account: Account, params: algosdk.SuggestedParams): Promise<void>;
    optInToASA(asaName: string, assetIndex: number, account: Account, flags: TxParams): Promise<void>;
    optInToASAMultiple(asaName: string, assetIndex: number, accounts: Account[], params: algosdk.SuggestedParams): Promise<void>;
    checkBalanceForOptInTx(name: string, params: algosdk.SuggestedParams, asaDef: ASADef, accounts: Accounts, creator: Account): Promise<Account[]>;
    deployASA(name: string, asaDef: ASADef, flags: ASADeploymentFlags, accounts: Accounts, txWriter: txWriter): Promise<ASAInfo>;
    deployASC(name: string, scParams: object, flags: ASCDeploymentFlags, payFlags: TxParams, txWriter: txWriter): Promise<ASCInfo>;
    private ensureCompiled;
}
