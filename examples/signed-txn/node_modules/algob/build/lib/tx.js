"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeNote = exports.makeASAOptInTx = exports.makeAssetCreateTxn = exports.mkSuggestedParams = exports.getSuggestedParams = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const util_1 = require("util");
const algo_operator_1 = require("./algo-operator");
async function getSuggestedParams(algocl) {
    const params = await algocl.getTransactionParams().do();
    // Private chains may have an issue with firstRound
    if (params.firstRound === 0) {
        throw new Error("Suggested params returned 0 as firstRound. Ensure that your node progresses.");
        // params.firstRound = 1
    }
    return params;
}
exports.getSuggestedParams = getSuggestedParams;
async function mkSuggestedParams(algocl, userDefaults) {
    var _a, _b, _c;
    const s = await getSuggestedParams(algocl);
    s.flatFee = userDefaults.totalFee !== undefined;
    s.fee = (_b = (_a = userDefaults.totalFee) !== null && _a !== void 0 ? _a : userDefaults.feePerByte) !== null && _b !== void 0 ? _b : algo_operator_1.ALGORAND_MIN_TX_FEE;
    if (s.flatFee)
        s.fee = Math.max(s.fee, algo_operator_1.ALGORAND_MIN_TX_FEE);
    s.firstRound = (_c = userDefaults.firstValid) !== null && _c !== void 0 ? _c : s.firstRound;
    s.lastRound = userDefaults.firstValid === undefined || userDefaults.validRounds === undefined
        ? s.lastRound
        : userDefaults.firstValid + userDefaults.validRounds;
    return s;
}
exports.mkSuggestedParams = mkSuggestedParams;
function makeAssetCreateTxn(name, asaDef, flags, txSuggestedParams) {
    var _a, _b;
    // If TxParams has noteb64 or note , it gets precedence
    let note;
    if ((_a = flags.noteb64) !== null && _a !== void 0 ? _a : flags.note) {
        // TxParams note
        note = encodeNote(flags.note, flags.noteb64);
    }
    else if ((_b = asaDef.noteb64) !== null && _b !== void 0 ? _b : asaDef.note) {
        // ASA definition note
        note = encodeNote(asaDef.note, asaDef.noteb64);
    }
    // https://github.com/algorand/docs/blob/master/examples/assets/v2/javascript/AssetExample.js#L104
    return algosdk_1.default.makeAssetCreateTxnWithSuggestedParams(flags.creator.addr, note, asaDef.total, asaDef.decimals, asaDef.defaultFrozen, asaDef.manager, asaDef.reserve, asaDef.freeze, asaDef.clawback, asaDef.unitName, name, asaDef.url, asaDef.metadataHash, txSuggestedParams);
}
exports.makeAssetCreateTxn = makeAssetCreateTxn;
function makeASAOptInTx(addr, assetID, params) {
    const closeRemainderTo = undefined;
    const revocationTarget = undefined;
    const amount = 0;
    const note = undefined;
    return algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(addr, addr, closeRemainderTo, revocationTarget, amount, note, assetID, params);
}
exports.makeASAOptInTx = makeASAOptInTx;
function encodeNote(note, noteb64) {
    const encoder = new util_1.TextEncoder();
    return noteb64 ? encoder.encode(noteb64) : encoder.encode(note);
}
exports.encodeNote = encodeNote;
//# sourceMappingURL=tx.js.map