"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlgoClientImpl = exports.createDeployClient = void 0;
const driver_1 = require("../lib/driver");
const tx = __importStar(require("./tx"));
const confirmedRound = "confirmed-round";
function createDeployClient(network) {
    return new AlgoClientImpl(driver_1.createClient(network));
}
exports.createDeployClient = createDeployClient;
class AlgoClientImpl {
    constructor(algoClient) {
        this.algoClient = algoClient;
    }
    // Source:
    // https://github.com/algorand/docs/blob/master/examples/assets/v2/javascript/AssetExample.js#L21
    // Function used to wait for a tx confirmation
    async waitForConfirmation(txId) {
        const response = await this.algoClient.status().do();
        let lastround = response["last-round"];
        while (true) {
            const pendingInfo = await this.algoClient.pendingTransactionInformation(txId).do();
            if (pendingInfo[confirmedRound] !== null && pendingInfo[confirmedRound] > 0) {
                return pendingInfo;
            }
            lastround++;
            await this.algoClient.statusAfterBlock(lastround).do();
        }
    }
    ;
    async deployASA(name, asaDesc, flags) {
        console.log("Deploying ASA:", name);
        const assetTX = await tx.makeAssetCreateTxn(name, this.algoClient, asaDesc, flags);
        const rawSignedTxn = assetTX.signTxn(flags.creator.sk);
        const txInfo = await this.algoClient.sendRawTransaction(rawSignedTxn).do();
        const txConfirmation = await this.waitForConfirmation(txInfo.txId);
        return {
            creator: flags.creator.addr,
            txId: txInfo.txId,
            assetIndex: txConfirmation["asset-index"],
            confirmedRound: txConfirmation[confirmedRound]
        };
    }
}
exports.AlgoClientImpl = AlgoClientImpl;
//# sourceMappingURL=algo-client.js.map