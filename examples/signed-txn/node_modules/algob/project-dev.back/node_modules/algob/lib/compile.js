"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompileOp = exports.tealExt = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const yaml_1 = __importDefault(require("yaml"));
const errors_1 = require("../internal/core/errors");
const project_structure_1 = require("../internal/core/project-structure");
const time_1 = require("../lib/time");
const murmurhash = require('murmurhash'); // eslint-disable-line @typescript-eslint/no-var-requires
exports.tealExt = ".teal";
class CompileOp {
    constructor(algocl) {
        this.cacheAssured = false;
        this.algocl = algocl;
    }
    // Gets the TEAL compiled result from artifacts cache and compiles the code if necessary.
    // Will throw an exception if the source file doesn't exists.
    // @param filename: name of the TEAL code in `/assets` directory.
    //   (Examples: `mysc.teal, security/rbac.teal`)
    //   MUST have a .teal extension
    // @param force: if true it will force recompilation even if the cache is up to date.
    async ensureCompiled(filename, force) {
        if (!filename.endsWith(exports.tealExt)) {
            throw new Error(`filename "${filename}" must end with "${exports.tealExt}"`); // TODO: convert to buildererror
        }
        const [teal, thash] = this.readTealAndHash(path.join(project_structure_1.ASSETS_DIR, filename));
        let a = await this.readArtifact(filename);
        if (!force && a !== undefined && a.srcHash === thash) {
            // '\x1b[33m%s\x1b[0m' for yellow color warning
            console.warn('\x1b[33m%s\x1b[0m', `smart-contract source "${filename}" didn't change, skipping.`);
            return a;
        }
        console.log("compiling", filename);
        a = await this.compile(filename, teal, thash);
        const cacheFilename = path.join(project_structure_1.CACHE_DIR, filename + ".yaml");
        this.writeFile(cacheFilename, yaml_1.default.stringify(a));
        return a;
    }
    readTealAndHash(filename) {
        const content = fs.readFileSync(filename, 'utf8');
        return [content, murmurhash.v3(content)];
    }
    async readArtifact(filename) {
        await project_structure_1.assertDir(project_structure_1.CACHE_DIR);
        try {
            const p = path.join(project_structure_1.CACHE_DIR, filename + ".yaml");
            return yaml_1.default.parse(await fs.promises.readFile(p, 'utf8'));
        }
        catch (e) {
            if ((e === null || e === void 0 ? void 0 : e.errno) === -2) {
                return undefined;
            } // errno whene reading an unexisting file
            throw e;
        }
    }
    callCompiler(code) {
        return this.algocl.compile(code).do();
    }
    async compile(filename, tealCode, tealHash) {
        try {
            const co = await this.callCompiler(tealCode);
            return {
                filename: filename,
                timestamp: time_1.timestampNow(),
                compiled: co.result,
                compiledHash: co.hash,
                srcHash: tealHash
            };
        }
        catch (e) {
            throw errors_1.parseAlgorandError(e, { filename: filename });
        }
    }
    writeFile(filename, content) {
        fs.writeFileSync(filename, content);
    }
}
exports.CompileOp = CompileOp;
//# sourceMappingURL=compile.js.map