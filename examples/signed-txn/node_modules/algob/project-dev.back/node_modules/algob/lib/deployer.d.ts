import * as algosdk from "algosdk";
import { Account, Accounts, AlgobDeployer, AlgobRuntimeEnv, ASADefs, ASADeploymentFlags, ASAInfo, ASCDeploymentFlags, ASCInfo, ASCPaymentFlags, CheckpointRepo } from "../types";
import { AlgoOperator } from "./algo-operator";
export declare class AlgobDeployerImpl implements AlgobDeployer {
    private readonly runtimeEnv;
    private readonly cpData;
    private readonly loadedAsaDefs;
    private readonly algoOp;
    readonly accounts: Account[];
    readonly accountsByName: Accounts;
    constructor(runtimeEnv: AlgobRuntimeEnv, cpData: CheckpointRepo, asaDefs: ASADefs, algoOp: AlgoOperator);
    get isDeployMode(): boolean;
    private get networkName();
    putMetadata(key: string, value: string): void;
    getMetadata(key: string): string | undefined;
    private assertNoAsset;
    deployASA(name: string, flags: ASADeploymentFlags): Promise<ASAInfo>;
    deployASC(name: string, scParams: Object, flags: ASCDeploymentFlags, payFlags: ASCPaymentFlags): Promise<ASCInfo>;
    isDefined(name: string): boolean;
    get asa(): Map<string, ASAInfo>;
    get asc(): Map<string, ASCInfo>;
    get algodClient(): algosdk.Algodv2;
    waitForConfirmation(txId: string): Promise<algosdk.ConfirmedTxInfo>;
}
export declare class AlgobDeployerReadOnlyImpl implements AlgobDeployer {
    private readonly _internal;
    constructor(deployer: AlgobDeployer);
    get accounts(): Account[];
    get accountsByName(): Accounts;
    get isDeployMode(): boolean;
    putMetadata(_key: string, _value: string): void;
    getMetadata(key: string): string | undefined;
    deployASA(_name: string, _flags: ASADeploymentFlags): Promise<ASAInfo>;
    deployASC(_name: string, scParams: Object, flags: ASCDeploymentFlags, payFlags: ASCPaymentFlags): Promise<ASCInfo>;
    isDefined(name: string): boolean;
    get asa(): Map<string, ASAInfo>;
    get asc(): Map<string, ASCInfo>;
    get algodClient(): algosdk.Algodv2;
    waitForConfirmation(txId: string): Promise<algosdk.ConfirmedTxInfo>;
}
