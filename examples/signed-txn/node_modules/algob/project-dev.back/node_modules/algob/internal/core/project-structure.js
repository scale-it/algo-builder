"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertDir = exports.assertAllDirs = exports.getUserConfigPath = exports.isCwdInsideProject = exports.CACHE_DIR = exports.ARTIFACTS_DIR = exports.ASSETS_DIR = exports.JS_CONFIG_FILENAME = void 0;
const findUp = __importStar(require("find-up"));
const fs = __importStar(require("fs"));
const path_1 = require("path");
const fsp = fs.promises;
exports.JS_CONFIG_FILENAME = "algob.config.js";
// export const TS_CONFIG_FILENAME = "algob.config.ts";
exports.ASSETS_DIR = "assets";
exports.ARTIFACTS_DIR = "artifacts";
exports.CACHE_DIR = path_1.join(exports.ARTIFACTS_DIR, "cache");
function isCwdInsideProject() {
    return Boolean(findUp.sync(exports.JS_CONFIG_FILENAME));
}
exports.isCwdInsideProject = isCwdInsideProject;
function getUserConfigPath() {
    return findUp.sync(exports.JS_CONFIG_FILENAME);
}
exports.getUserConfigPath = getUserConfigPath;
async function assertAllDirs() {
    const tasks = [];
    for (const d of [exports.ASSETS_DIR]) {
        tasks.push(assertDir(d));
    }
    await Promise.all(tasks);
}
exports.assertAllDirs = assertAllDirs;
async function assertDir(dirname) {
    try {
        await fsp.access(dirname, fs.constants.F_OK);
    }
    catch (e) {
        fs.mkdirSync(dirname, { recursive: true });
    }
}
exports.assertDir = assertDir;
//# sourceMappingURL=project-structure.js.map