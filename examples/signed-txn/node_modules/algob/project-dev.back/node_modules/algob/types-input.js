"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASADefsSchema = exports.ASADefSchema = exports.AddressSchema = void 0;
const z = __importStar(require("zod"));
exports.AddressSchema = z.string();
// https://developer.algorand.org/docs/reference/rest-apis/algod/
const metadataRegex = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==\|[A-Za-z0-9+/]{3}=)?$/;
exports.ASADefSchema = z.object({
    total: z.number(),
    decimals: z.number(),
    defaultFrozen: z.boolean().optional(),
    unitName: z.string().optional(),
    url: z.string().optional(),
    metadataHash: z.string().optional(),
    note: z.string().optional(),
    noteb64: z.string().optional(),
    manager: exports.AddressSchema.optional(),
    reserve: exports.AddressSchema.optional(),
    freeze: exports.AddressSchema.optional(),
    clawback: exports.AddressSchema.optional(),
    optInAccNames: z.array(z.string()).optional()
})
    .refine(o => ((o.decimals <= 19) && (o.decimals >= 0)), {
    message: "Decimals must be between 0(non divisible) and 19",
    path: ['decimals']
})
    .refine(o => (!o.unitName || (o.unitName && (o.unitName.length <= 8))), {
    message: "Unit name must not be longer than 8 bytes",
    path: ['unitName']
})
    .refine(o => (!o.url || (o.url && (o.url.length <= 32))), {
    message: "URL must not be longer than 32 bytes",
    path: ['url']
})
    .refine(o => (!o.metadataHash || (o.metadataHash && (o.metadataHash.length <= 32))), {
    message: "Metadata Hash must not be longer than 32 bytes",
    path: ['metadataHash']
})
    .refine(o => (!o.metadataHash || (o.metadataHash && (metadataRegex.test(o.metadataHash)))), {
    message: "metadataHash doesn't match regex from " +
        "https://developer.algorand.org/docs/reference/rest-apis/algod/",
    path: ['metadataHash']
});
exports.ASADefsSchema = z.record(exports.ASADefSchema);
//# sourceMappingURL=types-input.js.map