"use strict";
// import debug from "debug";
Object.defineProperty(exports, "__esModule", { value: true });
const config_env_1 = require("../internal/core/config/config-env");
const task_names_1 = require("./task-names");
function default_1() {
    // const log = debug("algob:core:tasks:console");
    config_env_1.task(task_names_1.TASK_CONSOLE, "Opens algob console")
        .addFlag("noCompile", "Don't compile before running this task")
        .setAction(async ({ noCompile }, runtimeEnv) => {
        /*
        if (!runtimeEnv.config.paths) {
          return;
        }
        const paths = runtimeEnv.config.paths;

        const nodeArgs = [];
        if (semver.gte(process.version, "10.0.0")) {
          nodeArgs.push("--experimental-repl-await");
        }

        log(
          `Creating a Node REPL subprocess with Buidler's register so we can set some Node's flags`);

        // Running the script "" is like running `node`, so this starts the repl
        // await runScriptWithBuidler(buidlerArguments, "", [], nodeArgs, {
        //   NODE_REPL_HISTORY: historyFile,
        // });
        */
        // TODO: After refactoring script loading workflow the REPL
        // has to be started by reusing the current process
        throw new Error("Console is not supported");
    });
}
exports.default = default_1;
//# sourceMappingURL=console.js.map