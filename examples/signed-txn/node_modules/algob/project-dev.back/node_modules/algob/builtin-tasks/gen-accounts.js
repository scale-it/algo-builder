"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genAccounts = exports.mkAccounts = exports.getFilename = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const _fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const yaml_1 = __importDefault(require("yaml"));
const config_env_1 = require("../internal/core/config/config-env");
const errors_1 = require("../internal/core/errors");
const types = __importStar(require("../internal/core/params/argument-types"));
const project_structure_1 = require("../internal/core/project-structure");
const task_names_1 = require("./task-names");
const fsp = _fs.promises;
function default_1() {
    config_env_1.task(task_names_1.TASK_GEN_ACCOUNTS, "Generates custom accounts (not safe for production use)")
        .addPositionalParam("n", "number of accounts to generate", undefined, types.int, false)
        .addFlag("force", "Overwrite generated accounts if the file already exists")
        .setAction(mkAccounts);
}
exports.default = default_1;
function getFilename() { return path.join(project_structure_1.ASSETS_DIR, "accounts_generated.yaml"); }
exports.getFilename = getFilename;
async function mkAccounts(taskArgs, _env) {
    const filename = getFilename();
    const n = taskArgs.n;
    if (n <= 0) {
        throw new errors_1.BuilderError(errors_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {
            value: n,
            name: 'n'
        });
    }
    console.info("GENERATING", n, "ACCOUNTS to ", filename);
    const accounts = genAccounts(n);
    return await writeToFile(yaml_1.default.stringify(accounts), taskArgs.force, filename);
}
exports.mkAccounts = mkAccounts;
function genAccounts(n) {
    const accounts = [];
    for (let i = 0; i < n; ++i) {
        const a = algosdk_1.default.generateAccount();
        accounts.push({
            name: "gen_" + i.toString(),
            addr: a.addr,
            mnemonic: algosdk_1.default.secretKeyToMnemonic(a.sk)
        });
    }
    return accounts;
}
exports.genAccounts = genAccounts;
async function writeToFile(content, force, filename) {
    await project_structure_1.assertAllDirs();
    try {
        await fsp.access(filename, _fs.constants.F_OK);
        if (!force) {
            console.error("File", filename, "already exists. Aborting. Use --force flag if you want to overwrite it");
            return;
        }
    }
    catch (e) { }
    try {
        await fsp.writeFile(filename, content, 'utf8');
    }
    catch (e) {
        const err = e;
        console.log("An error occured while writing to file:", filename);
        console.error(err.name, err.message);
    }
}
//# sourceMappingURL=gen-accounts.js.map