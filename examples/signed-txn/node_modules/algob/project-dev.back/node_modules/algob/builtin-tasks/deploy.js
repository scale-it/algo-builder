"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeDeployTask = exports.loadFilenames = void 0;
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const config_env_1 = require("../internal/core/config/config-env");
const errors_1 = require("../internal/core/errors");
const errors_list_1 = require("../internal/core/errors-list");
const algo_operator_1 = require("../lib/algo-operator");
const comparators_1 = require("../lib/comparators");
const files_1 = require("../lib/files");
const script_checkpoints_1 = require("../lib/script-checkpoints");
const run_1 = require("./run");
const task_names_1 = require("./task-names");
function loadFilenames(directory) {
    if (!fs_1.default.existsSync(directory)) {
        throw new errors_1.BuilderError(errors_list_1.ERRORS.BUILTIN_TASKS.SCRIPTS_DIRECTORY_NOT_FOUND, {
            directory
        });
    }
    return glob_1.default.sync(path_1.default.join(directory, "*.js")).sort(comparators_1.cmpStr);
}
exports.loadFilenames = loadFilenames;
function clearCheckpointFiles(scriptNames) {
    scriptNames.forEach(scriptName => {
        try {
            // fs.unlink deletes the file
            fs_1.default.unlinkSync(script_checkpoints_1.toCheckpointFileName(scriptName));
        }
        catch (e) {
            // ignored
        }
    });
}
async function executeDeployTask({ fileNames, force }, runtimeEnv, algoOp) {
    const logDebugTag = "algob:tasks:deploy";
    const scriptNames = fileNames.length === 0
        ? loadFilenames(script_checkpoints_1.scriptsDirectory)
        : files_1.assertDirectDirChildren(script_checkpoints_1.scriptsDirectory, fileNames);
    if (scriptNames.length === 0) {
        throw new errors_1.BuilderError(errors_list_1.ERRORS.BUILTIN_TASKS.SCRIPTS_NO_FILES_FOUND, {
            directory: script_checkpoints_1.scriptsDirectory
        });
    }
    if (force) {
        clearCheckpointFiles(scriptNames);
    }
    const onSuccessFn = (cpData, relativeScriptPath) => {
        script_checkpoints_1.persistCheckpoint(relativeScriptPath, cpData.strippedCP);
    };
    return await run_1.runMultipleScripts(runtimeEnv, scriptNames, onSuccessFn, force, logDebugTag, true, algoOp);
}
exports.executeDeployTask = executeDeployTask;
function default_1() {
    config_env_1.task(task_names_1.TASK_DEPLOY, "Compiles and runs user-defined scripts from scripts directory")
        .addFlag("force", "Run the scripts even if checkpoint state already exist (Danger: it will overwrite them).")
        .addOptionalVariadicPositionalParam("fileNames", "A directory that contains js files to be run within algob's environment", [])
        .setAction((input, env) => executeDeployTask(input, env, algo_operator_1.createAlgoOperator(env.network)));
}
exports.default = default_1;
//# sourceMappingURL=deploy.js.map