/**
 * Description:
 *  This script demonstrates a transaction validated by an asc signed by multisig account with a threshold of 2
    User saves the signed logic in assets/ which is extracted and used here.
*/
const { transferAlgo } = require("./common");
const { transferMicroAlgos, createMsigAddress } = require("algob");

async function run(runtimeEnv, deployer) {
  const masterAccount = deployer.accountsByName.get("master-account")
  const goldOwnerAccount = deployer.accountsByName.get("gold-owner-account");
  const johnAccount = deployer.accountsByName.get("john-account");
  const bobAccount = deployer.accountsByName.get("bob-account");
  
  //Generate multi signature account hash 
  const addrs =  [goldOwnerAccount.addr, johnAccount.addr, bobAccount.addr]  // you can replace these addresses with your custom addrs for multisig account.
  const [mparams, multsigaddr] = createMsigAddress(1, 2, addrs);   // passing (version, threshold, address list)
 
  //Extracting multisig from dissembled file generated by goal (goal clerk compile -D <path_to_file>)
  const signedLsig = await deployer.loadMultiSig("sample-asc.msig", []);  

  //Funding multisignature account
  await transferMicroAlgos(deployer, masterAccount, multsigaddr, 10000000, {note: "Funding multisig account"});

  // Transaction PASS - according to sample-asc.teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: multsigaddr }, bobAccount.addr, 58, signedLsig);

  // Transaction FAIL - according to sample-asc.teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: multsigaddr }, bobAccount.addr, 180, signedLsig);
  
}

module.exports = { default: run }