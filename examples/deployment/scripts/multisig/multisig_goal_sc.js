/**
 * Description:
 * This file demonstrates the example to
   - load a signed lsig from assets and use that lsig to validate transactions
*/
const { transferAlgo } = require("../transfer/common");
const { transferMicroAlgos, getmultisigAddress } = require("algob");

async function run(runtimeEnv, deployer) {
  const goldOwnerAccount = deployer.accountsByName.get("gold-owner-account");
  const johnAccount = deployer.accountsByName.get("john-account");
  const bobAccount = deployer.accountsByName.get("bob-account");

  /*
    This example demonstrates a transaction validated by a smart contract signed by a multisig account with threshold of 2
    User saves the signed logic signature file in assets/ which is extracted and used here.
  */
  
  //Generate multi signature account hash 
  const addrs =  [goldOwnerAccount.addr, johnAccount.addr, bobAccount.addr]  // you can replace these addresses with your custom addrs for multisig account.
  const [mparams, kmdMsigAddress] = getmultisigAddress(1, 2, addrs);   // passing (version, threshold, address list)
 
  //Extracting multisig from dissembled file generated by goal (goal clerk compile -D <path_to_file>)
  const signedLsig = await deployer.loadMultiSig("gold-john-bob.mlsig", []);  

  //Funding multisignature account
  await transferMicroAlgos(deployer, goldOwnerAccount, kmdMsigAddress, 10000000, {note: "Funding multisig account"});

  // Transaction PASS - As according to .teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: kmdMsigAddress }, bobAccount.addr, 58, signedLsig);

  // Transaction FAIL - As according to .teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: kmdMsigAddress }, bobAccount.addr, 180, signedLsig);
  
}

module.exports = { default: run }
