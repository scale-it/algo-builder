/**
 * Description:
 * This file demonstrates the example to
   - load a signed lsig from assets and use that lsig to validate transactions
   - create a signed lsig using sdk and use that lsig to validate transactions
*/
const { transferAlgo } = require("./common");
const { transferMicroAlgos } = require("algob");
const algosdk = require('algosdk');

async function run(runtimeEnv, deployer) {
  const goldOwnerAccount = deployer.accountsByName.get("gold-owner-account");
  const johnAccount = deployer.accountsByName.get("john-account");
  const bobAccount = deployer.accountsByName.get("bob-account");

  //Get Logic Signature
  const logicSignature = await deployer.getLogicSignature("3-gold-delegated-asc.teal", []);

  /*
    These accounts are generated by using goal (goal account new)
    The above example demonstrates a transaction validated by a smart contract signed by a multisig account with threshold of 2
    User saves the signed logic signature file in assets/ which is extracted and used here.
  */
  const kmdParams = {
    version: 1,
    threshold: 2,
    addrs: [
      'STICGNGDJKFGSSHHXALD6VBEJ5XLWL7QK5UIGV3DE2ONEXNFB6ZSOMGP6Y',
      'U6NEV736OHP7V7QHXKZFP6QAPE5PMYJOYIPWT2VZCWIMWGJS62ZK7XLKCE',
      'Z2SFZ7X2RAKTU4JYGUYYE7LDIE6M7NYCMUQEAIKII4UDT5KYE4IJNZAGCU',
    ],
  };
  const kmdMsigAddress = algosdk.multisigAddress(kmdParams);  //Generate multi signature account hash 

  //Extracting multisig from dissembled file generated by goal (goal clerk compile -D <path_to_file>)
  const Msig = await deployer.getDelegatedMsig("3-gold-msig.multilsig");  

  logicSignature.msig = {};
  Object.assign(logicSignature.msig, Msig);

  //Funding multisignature account
  await transferMicroAlgos(deployer, goldOwnerAccount, kmdMsigAddress, 10000000, {note: "Funding multisig account"});

  // Transaction PASS - As according to .teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: kmdMsigAddress }, bobAccount.addr, 58, logicSignature);

  // Transaction FAIL - As according to .teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: kmdMsigAddress }, bobAccount.addr, 580, logicSignature);
  

  /*
    This example uses algosdk to sign a logic signature by multiple accounts and validate transactions
  */
  const mparams = {
    version: 1,
    threshold: 2,
    addrs: [
      goldOwnerAccount.addr,
      johnAccount.addr,
      bobAccount.addr,
    ],
  };
  const multsigaddr = algosdk.multisigAddress(mparams);

  //Minimum two signatures required as threshold is set to 2
  logicSignature.sign(goldOwnerAccount.sk, mparams);  //lsig signed by gold-owner secret_key
  logicSignature.appendToMultisig(johnAccount.sk);    //lsig signed again (threshold = 2) by john-account secret_key

  //Funding multisignature account
  await transferMicroAlgos(deployer, goldOwnerAccount, multsigaddr, 10000000, {note: "Funding multisig account"});

  // Transaction PASS - As according to .teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: multsigaddr }, bobAccount.addr, 58, logicSignature);

  // Transaction FAIL - As according to .teal logic, amount should be <= 100
  await transferAlgo(deployer, { addr: multsigaddr }, bobAccount.addr, 580, logicSignature);
}

module.exports = { default: run }
